generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      String   @default("engineer")
  createdAt DateTime @default(now())
  incidents Incident[]
}

model Team {
  id        String   @id @default(cuid())
  name      String   @unique
  skills    Skill[]
  members   User[]
}

model Skill {
  id      String @id @default(cuid())
  name    String
  team    Team?  @relation(fields: [teamId], references: [id])
  teamId  String?
}

model Project {
  id        String   @id @default(cuid())
  name      String   @unique
  branches  Branch[]
}

model Branch {
  id        String   @id @default(cuid())
  name      String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
}

model Incident {
  id          String   @id @default(cuid())
  title       String
  status      String   @default("open")
  severity    Int      @default(3)
  branchId    String?
  assignedTo  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  timeline    IncidentEvent[]
  slaPolicy   SLAPolicy? @relation(fields: [slaPolicyId], references: [id])
  slaPolicyId String?
}

model IncidentEvent {
  id         String   @id @default(cuid())
  incident   Incident @relation(fields: [incidentId], references: [id])
  incidentId String
  type       String
  detail     Json
  createdAt  DateTime @default(now())
}

model SLAPolicy {
  id          String   @id @default(cuid())
  name        String
  respondMins Int      @default(15)
  resolveMins Int      @default(240)
}

model SLATimer {
  id          String   @id @default(cuid())
  incidentId  String
  kind        String  // respond or resolve
  deadline    DateTime
  fired       Boolean @default(false)
}

model AgentRun {
  id          String   @id @default(cuid())
  incidentId  String
  state       Json
  summary     String?
  createdAt   DateTime @default(now())
  finishedAt  DateTime?
}

model ChatMessage {
  id         String   @id @default(cuid())
  incidentId String
  authorId   String?
  content    String
  createdAt  DateTime @default(now())
}
